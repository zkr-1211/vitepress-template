import{_ as t,c as e,o as a,U as r}from"./chunks/framework.DlPsLRwt.js";const x=JSON.parse('{"title":"Git使用规范说明","description":"","frontmatter":{},"headers":[],"relativePath":"docs/Git使用规范.md","filePath":"docs/Git使用规范.md","lastUpdated":1712474765000}'),l={name:"docs/Git使用规范.md"},i=r('<h1 id="git使用规范说明" tabindex="-1">Git使用规范说明 <a class="header-anchor" href="#git使用规范说明" aria-label="Permalink to &quot;Git使用规范说明&quot;">​</a></h1><div class="vp-table__container"><table><thead><tr><th style="text-align:center;">时间</th><th style="text-align:center;">说明</th><th style="text-align:center;">修改人</th><th style="text-align:center;">版本号</th></tr></thead><tbody><tr><td style="text-align:center;">2022-09-28</td><td style="text-align:center;">Git使用规范 初稿</td><td style="text-align:center;">龚循建</td><td style="text-align:center;">v0.1.0</td></tr><tr><td style="text-align:center;">2022-09-30</td><td style="text-align:center;">添加操作说明和时序图</td><td style="text-align:center;">龚循建</td><td style="text-align:center;">v0.3.0</td></tr><tr><td style="text-align:center;">2022-10-08</td><td style="text-align:center;">定稿，调整部分说明及错误描述</td><td style="text-align:center;">龚循建</td><td style="text-align:center;">v1.0.0</td></tr><tr><td style="text-align:center;">2023-03-06</td><td style="text-align:center;">调整分支定义，删除版本号管理</td><td style="text-align:center;">龚循建</td><td style="text-align:center;">v1.1.0</td></tr><tr><td style="text-align:center;">2023-05-20</td><td style="text-align:center;">精简操作流程，删除子任务相关操作</td><td style="text-align:center;">龚循建</td><td style="text-align:center;">v1.1.1</td></tr><tr><td style="text-align:center;">2023-07-18</td><td style="text-align:center;">新增研发分支定义，重新添加复杂需求管理规定</td><td style="text-align:center;">龚循建</td><td style="text-align:center;">v1.2.0</td></tr></tbody></table></div><h2 id="git使用规范的意义" tabindex="-1">Git使用规范的意义 <a class="header-anchor" href="#git使用规范的意义" aria-label="Permalink to &quot;Git使用规范的意义&quot;">​</a></h2><p>​ 实际开发过程中，多名程序员开发同一个项目时很容易造成代码混乱甚至代码丢失的情况，为解决分支和杂乱无章的问题，引入 Gitflow 代码开发合并管理办法，提出驿汇客 Git 使用规范。</p><p>​ 旨在提升团队运作效率，降低组员沟通成本，提高团队运作效率。</p><h2 id="一、版本规范" tabindex="-1">一、版本规范 <a class="header-anchor" href="#一、版本规范" aria-label="Permalink to &quot;一、版本规范&quot;">​</a></h2><h3 id="_1-版本号定义" tabindex="-1"><s>1）版本号定义</s> <a class="header-anchor" href="#_1-版本号定义" aria-label="Permalink to &quot;~~1）版本号定义~~&quot;">​</a></h3><p><s>版本号使用 <em><strong>x.y.z</strong></em> 进行定义，例如：v1.3.1，v3.0.7</s></p><ul><li><s><em><strong>x</strong></em>：表示重大版本迭代，在项目业务出现重大更新时执行变更，比如：核心业务变化、框架深度重构、UI风格全量调优或置换等，此编号的变化由项管决定；</s></li><li><s><em><strong>y</strong></em>：表示需求包迭代，正常情况下会按照版本包次序递增，遵循一包一码的原则，此编号的变化由产品经理决定；</s></li><li><s><em><strong>z</strong></em>：表示禅道需求迭代，目前按照项目投产次数累加（可以多禅道合并投产），若遇x、y变更，z重置为1并重新参与禅道需求迭代；</s></li><li><s>a：表示Bug修正，按Bug修复个数依次累加，主版本号变更时重置，此项由研发自行（待确定）；</s></li></ul><blockquote><p>经组内协商，删除有关分支版本号的规定，后续版本分支的定义和命名均使用关键字、日期、禅道编号、内容描述等进行表述；</p><p>若后续启用版本号定义，届时会重新定制版本号规则，请知悉。</p></blockquote><h3 id="_2-分支定义" tabindex="-1">2）分支定义 <a class="header-anchor" href="#_2-分支定义" aria-label="Permalink to &quot;2）分支定义&quot;">​</a></h3><ul><li>master：主分支，稳定版本，用于生产代码 <strong>审查</strong> 操作，需求包投产完结之后，一般由 <strong>发布分支</strong> 合并，合并过程会伴随代码审查，非特殊情况，不允许直接在 master 分支上提交代码；</li><li>release：发布分支，项目投产后，代码统一归并此分支，执行代码 <strong>归档</strong> 操作，一般由 <strong>预发布分支</strong> 和 <strong>紧急修复分支</strong> 合并，非特殊情况，不允许直接在 release 分支上修改代码；</li><li>release_[投产日期]-[投产描述]：预发布分支，由研发主管基于<strong>发布分支</strong>统一创建，项目 <strong>投产</strong> 前执行分支合并，一般由 <strong>开发分支</strong> 并入，投产验收后，研发主管执行代码回归操作；</li><li>feature/test_[提测日期]-[提测描述]：测试分支，由研发主管创建，基于当前生产在用的 <strong>发布分支</strong> 执行创建操作；</li><li>develop/[禅道编号]-[禅道名称]：研发分支，由研发负责人创建，基于最新的 <strong>测试分支</strong> 执行创建操作；</li><li>hotfix/[修复时间]-[修复描述]：热修复修复分支，由Bug负责人基于<strong>发布分支</strong>创建，用于应对需求投产验证后出现的Bug问题，投产验收后，Bug负责人将信息同步至研发主管，由主管执行代码回归；</li></ul><blockquote><p>烦请各位同学严格按照上述分支定义执行命名分支</p></blockquote><h3 id="_3-环境标识定义" tabindex="-1">3）环境标识定义 <a class="header-anchor" href="#_3-环境标识定义" aria-label="Permalink to &quot;3）环境标识定义&quot;">​</a></h3><p>各项目中涉及到环境隔离，无论文件命名或参数定义等，统一使用以下标识符</p><ul><li>local：本地环境标识</li><li>dev：研发环境标识</li><li>test：测试环境标识</li><li>pre：预发布环境标识</li><li>prod：生产环境标识</li></ul><h2 id="二、开发流程" tabindex="-1">二、开发流程 <a class="header-anchor" href="#二、开发流程" aria-label="Permalink to &quot;二、开发流程&quot;">​</a></h2><h3 id="_1-基本操作命令" tabindex="-1">1） 基本操作命令 <a class="header-anchor" href="#_1-基本操作命令" aria-label="Permalink to &quot;1） 基本操作命令&quot;">​</a></h3><p>​ 0️⃣ 代码同步</p><p>​ <code>git pull xxx</code></p><p>​ 1️⃣ 创建需求</p><p>​ <code>git flow feature start xxx</code></p><p>​ 2️⃣ 完成需求</p><p>​ <code>git flow feature finish xxx</code></p><p>​ 3️⃣ 需求提测</p><p>​ <code>git push origin test_xxx</code></p><p>​ 4️⃣ 需求发布</p><p>​ <code>git push origin release_xxx</code></p><p>​ 5️⃣ 创建修复分支</p><p>​ <code>git hotfix origin release</code></p><h3 id="_2-操作时序图" tabindex="-1">2） 操作时序图 <a class="header-anchor" href="#_2-操作时序图" aria-label="Permalink to &quot;2） 操作时序图&quot;">​</a></h3><p>​ <a href="https://www.processon.com/view/link/63358dd363768977e8a66997" target="_blank" rel="noreferrer">Git使用规范时序图</a></p><h3 id="_3-流程说明" tabindex="-1">3） 流程说明 <a class="header-anchor" href="#_3-流程说明" aria-label="Permalink to &quot;3）  流程说明&quot;">​</a></h3><h4 id="_2-1-版本确立" tabindex="-1">2.1 版本确立 <a class="header-anchor" href="#_2-1-版本确立" aria-label="Permalink to &quot;2.1 版本确立&quot;">​</a></h4><p>​ 项目经理完成需求评审，根据产品提供的优先级排序确认需求研发路径和投产计划，评审过程给出具体的投产线路、周上线计划；</p><h4 id="_2-2-需求研发" tabindex="-1">2.2 需求研发 <a class="header-anchor" href="#_2-2-需求研发" aria-label="Permalink to &quot;2.2 需求研发&quot;">​</a></h4><p>​ 研发阶段，研发人员自行创建任务分支，研发过程中尽量做到每日一提交并push至服务器上，确保提交代码不影响正常启动，避免因极端情况导致代码损失；</p><h4 id="_2-3-测试验证" tabindex="-1">2.3 测试验证 <a class="header-anchor" href="#_2-3-测试验证" aria-label="Permalink to &quot;2.3 测试验证&quot;">​</a></h4><p>​ 开发人员需求研发完成后且自测通过，报备至项目经理，由项目经理发起送测流程，统一部署至测试环境并通知相关测试人员测试；</p><h4 id="_2-4-预发布准备" tabindex="-1">2.4 预发布准备 <a class="header-anchor" href="#_2-4-预发布准备" aria-label="Permalink to &quot;2.4 预发布准备&quot;">​</a></h4><p>​ 测试完成后，测试人员通知产品经理，在投产前夕，项目经理创建预发布分支，研发人员将投产所需的任务分支同步至预发布分支，最后统一部署至预发布环境，通知相关人员进行测试；</p><h4 id="_2-5-预发布验证" tabindex="-1">2.5 预发布验证 <a class="header-anchor" href="#_2-5-预发布验证" aria-label="Permalink to &quot;2.5 预发布验证&quot;">​</a></h4><p>​ 测试人员在准生产环境验证，若验证出现Bug，研发人员介入确认是代码问题，则重复执行【2.3】【2.4】【2.5】，直至验证通过，将结果报备至产品经理，并重新确认投产发布时间；</p><h4 id="_2-6-投产发布" tabindex="-1">2.6 投产发布 <a class="header-anchor" href="#_2-6-投产发布" aria-label="Permalink to &quot;2.6 投产发布&quot;">​</a></h4><p>​ 研发在投产发布前，准备好投产需要的SQL语句和DBA审批材料、Nacos配置，需求负责的研发人员进编写投产操作执行shell脚本，投产操作执行完成后，通知测试人员执行生产验证；</p><h4 id="_2-7-代码归档" tabindex="-1">2.7 代码归档 <a class="header-anchor" href="#_2-7-代码归档" aria-label="Permalink to &quot;2.7 代码归档&quot;">​</a></h4><p>​ 投产后隔日，在确认生产验证通过后，由研发主管将预发布分支代码合并至发布分支中，完成后在群上发布通知，其他研发人员根据群上通知，及时把预发布分支的代码及时同步至 release 中；</p><h4 id="_2-8-紧急修复" tabindex="-1">2.8 紧急修复 <a class="header-anchor" href="#_2-8-紧急修复" aria-label="Permalink to &quot;2.8 紧急修复&quot;">​</a></h4><p>​ 若有反馈功能缺陷或者Bug，确认与代码相关后，研发人员自行在当前发布分支上创建紧急修复分支；</p><h4 id="_2-9-修复验证" tabindex="-1">2.9 修复验证 <a class="header-anchor" href="#_2-9-修复验证" aria-label="Permalink to &quot;2.9 修复验证&quot;">​</a></h4><p>​ 研发人员本地验证完成后，直接投放准生产环境，通知测试人员进行验证直至验证通过，结果告知项目经理，执行生产功能修复，生产验证通过后，组长将紧急修复分支同步至发布分支；</p><h2 id="三、提测-投产" tabindex="-1">三、提测&amp;投产 <a class="header-anchor" href="#三、提测-投产" aria-label="Permalink to &quot;三、提测&amp;投产&quot;">​</a></h2><h3 id="_1-联调" tabindex="-1">1）联调 <a class="header-anchor" href="#_1-联调" aria-label="Permalink to &quot;1）联调&quot;">​</a></h3><p>​ 正常情况下，前端联调使用109研发环境，或者直连后端研发的本地环境进行接口联调；</p><h3 id="_2-提测" tabindex="-1">2）提测 <a class="header-anchor" href="#_2-提测" aria-label="Permalink to &quot;2）提测&quot;">​</a></h3><p>​ 研发人员完成研发任务，将代码合并至测试分支，本地自测通过后，更新至108环境，更新前需在场景大群里通知产品和测试；</p><h3 id="_3-投产" tabindex="-1">3）投产 <a class="header-anchor" href="#_3-投产" aria-label="Permalink to &quot;3）投产&quot;">​</a></h3><ol><li>需求评审完成，研发侧2天内向产品侧提供需求研发用时和排期，根据需求优先级提供提测时间和投产计划；</li><li>投产最小粒度为禅道，研发完成后向项目经理进行报备，投产前需向产品经理报备并确认投产时间；</li><li>若投产过程中遇到异常，若能及时处理则申请权限自行操作；若短时间内无法解决，则执行版本回退，并报备至项目经理；</li></ol><blockquote><p>注意：投产最小粒度不是任务，是禅道，且可以多禅道合并投产。</p></blockquote><h2 id="附录" tabindex="-1">附录 <a class="header-anchor" href="#附录" aria-label="Permalink to &quot;附录&quot;">​</a></h2><h3 id="附录一、git-flow-分支管理" tabindex="-1">附录一、Git Flow 分支管理 <a class="header-anchor" href="#附录一、git-flow-分支管理" aria-label="Permalink to &quot;附录一、Git Flow 分支管理&quot;">​</a></h3><p>​ 参考 <a href="https://blog.csdn.net/m0_57479969/article/details/121564116" target="_blank" rel="noreferrer">一文读懂Gitflow分支管理</a>，文章仅供参考</p>',62),o=[i];function n(s,d,h,c,p,g){return a(),e("div",null,o)}const _=t(l,[["render",n]]);export{x as __pageData,_ as default};
